//-- ------------------------------------------------------------
//-- Company name  :  DTGSOFT 
//-- Class name    :  clsOrderDetailDiffBase
//-- Creation date :  03/08/2018
//-- Created by    :  
//-- Description   :  
//-- Generated by  :  DTG Class Generator
//-- ------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections;
using System.Linq;
using System.Data; 

namespace OnChotto.Models.Dao
{
	public abstract class clsOrderDetailDiffBase : OnChotto.Models.Dao.BaseObject
    {
		#region  Constants
		public override String EntityTableName { get { return "OrderDetailDiff"; } set { base.EntityTableName = value; } }
		public override String EntityProcedureName { get { return "sp_OrderDetailDiff"; } set { base.EntityProcedureName = value; } }
		public override String EntityProcedureNameUser { get { return "usp_OrderDetailDiff"; } set { base.EntityProcedureNameUser = value; } }

		#endregion  

		#region  Variables

		#endregion  

		#region  Constructors
		public clsOrderDetailDiffBase()
			: base(DataAccess.AppConnectionString)
		{
		}

		public clsOrderDetailDiffBase(string connectionString)
			: base(connectionString)
		{
		}

		public clsOrderDetailDiffBase(DataAccess dal)
			: base(dal)
		{
		}

		protected override void Initialize()
		{
			//Entity Object Name
			base.EntityTableName = EntityTableName;
			base.EntityProcedureName = EntityProcedureName;

			//Table Columns Name
			FieldNames.Add("Id");
			FieldNames.Add("OrderDiffId");
			FieldNames.Add("OrderNo");
			FieldNames.Add("OrderTrackingNo");
			FieldNames.Add("StoreName");
			FieldNames.Add("ProductLink");
			FieldNames.Add("ProductName");
			FieldNames.Add("Size");
			FieldNames.Add("Amount");
			FieldNames.Add("Weight");
			FieldNames.Add("Price");
			FieldNames.Add("Discount");
			FieldNames.Add("PriceAfter");
			FieldNames.Add("Note");
			FieldNames.Add("ProductStatus");

			//Primary Key Columns Name
			FieldKeys.Add("Id");
		}
		#endregion  

		#region  Properties
		public System.Int32 Id
		{
			get;
			set;
		}
		public System.Int32 OrderDiffId
		{
			get;
			set;
		}
		public System.String OrderNo
		{
			get;
			set;
		}
		public System.String OrderTrackingNo
		{
			get;
			set;
		}
		public System.String StoreName
		{
			get;
			set;
		}
		public System.String ProductLink
		{
			get;
			set;
		}
		public System.String ProductName
		{
			get;
			set;
		}
		public System.String Size
		{
			get;
			set;
		}
		public System.Int32 Amount
		{
			get;
			set;
		}
		public System.Decimal Weight
		{
			get;
			set;
		}
		public System.Decimal Price
		{
			get;
			set;
		}
		public System.Decimal Discount
		{
			get;
			set;
		}
		public System.Decimal PriceAfter
		{
			get;
			set;
		}
		public System.String Note
		{
			get;
			set;
		}
		public System.String ProductStatus
		{
			get;
			set;
		}

		#endregion  

		#region  Methods


		public override int Insert()
		{
			OutputObject = null;
			try
			{
				DataAccessObject.ClearParam();
				DataAccessObject.InputDefaultParams();
				DataAccessObject.InputParams("Action", "Insert");
				DataAccessObject.InputParams("Id", Id);
				DataAccessObject.InputParams("OrderDiffId", OrderDiffId);
				DataAccessObject.InputParams("OrderNo", OrderNo);
				DataAccessObject.InputParams("OrderTrackingNo", OrderTrackingNo);
				DataAccessObject.InputParams("StoreName", StoreName);
				DataAccessObject.InputParams("ProductLink", ProductLink);
				DataAccessObject.InputParams("ProductName", ProductName);
				DataAccessObject.InputParams("Size", Size);
				DataAccessObject.InputParams("Amount", Amount);
				DataAccessObject.InputParams("Weight", Weight);
				DataAccessObject.InputParams("Price", Price);
				DataAccessObject.InputParams("Discount", Discount);
				DataAccessObject.InputParams("PriceAfter", PriceAfter);
				DataAccessObject.InputParams("Note", Note);
				DataAccessObject.InputParams("ProductStatus", ProductStatus);
				int intResult = DataAccessObject.ExecuteNonQuery(EntityProcedureName, DataAccessObject.ParamNames, DataAccessObject.ParamValues, ref OutputObject);

				if (OutputObject != null && OutputObject.Length > 0)
				{
					Id = DataAccess.CorrectValue(OutputObject.GetValue("Id").ToString(), System.Int32.MinValue);
				}

				return intResult;
			}
			catch (Exception ex)
			{
				throw ex; 
			}
		}


		public override int Update()
		{
			try
			{
				DataAccessObject.ClearParam();
				DataAccessObject.InputDefaultParams();
				DataAccessObject.InputParams("Action", "Update");
				DataAccessObject.InputParams("Id", Id);
				DataAccessObject.InputParams("OrderDiffId", OrderDiffId);
				DataAccessObject.InputParams("OrderNo", OrderNo);
				DataAccessObject.InputParams("OrderTrackingNo", OrderTrackingNo);
				DataAccessObject.InputParams("StoreName", StoreName);
				DataAccessObject.InputParams("ProductLink", ProductLink);
				DataAccessObject.InputParams("ProductName", ProductName);
				DataAccessObject.InputParams("Size", Size);
				DataAccessObject.InputParams("Amount", Amount);
				DataAccessObject.InputParams("Weight", Weight);
				DataAccessObject.InputParams("Price", Price);
				DataAccessObject.InputParams("Discount", Discount);
				DataAccessObject.InputParams("PriceAfter", PriceAfter);
				DataAccessObject.InputParams("Note", Note);
				DataAccessObject.InputParams("ProductStatus", ProductStatus);
				return DataAccessObject.ExecuteNonQuery(EntityProcedureName, DataAccessObject.ParamNames, DataAccessObject.ParamValues);
			}
			catch (Exception ex)
			{
				throw ex; 
			}
		}


		public override int Delete()
		{
			OutputObject = null;
			try
			{
				DataAccessObject.ClearParam();
				DataAccessObject.InputDefaultParams();
				DataAccessObject.InputParams("Action", "Delete");
				DataAccessObject.InputParams("Id", Id);
				return DataAccessObject.ExecuteNonQuery(EntityProcedureName, DataAccessObject.ParamNames, DataAccessObject.ParamValues);
			}
			catch (Exception ex)
			{
				throw ex; 
			}
		}


		public override int Delete(System.Int32 id)
		{
			OutputObject = null;
			try
			{
				DataAccessObject.ClearParam();
				DataAccessObject.InputDefaultParams();
				DataAccessObject.InputParams("Action", "Delete");
				DataAccessObject.InputParams("Id", id);
				return DataAccessObject.ExecuteNonQuery(EntityProcedureName, DataAccessObject.ParamNames, DataAccessObject.ParamValues);
			}
			catch (Exception ex)
			{
				throw ex; 
			}
		}


		public override bool GetByKey(System.Int32 id)
		{
			OutputObject = null;
			DataTable dt = new DataTable(); 
			try
			{
				DataAccessObject.ClearParam();
				DataAccessObject.InputDefaultParams();
				DataAccessObject.InputParams("Action", "GetByKey");
				DataAccessObject.InputParams("Id", id);
				dt = DataAccessObject.ExecuteDataTable(EntityProcedureName, DataAccessObject.ParamNames, DataAccessObject.ParamValues);
				Reset();
				if(dt == null || dt.Rows.Count == 0) 
					return false;

				Fill(dt.Rows[0]);
				return true;
			}
			catch (Exception ex)
			{
				throw ex; 
			}
		}


		public override bool IsExists(System.Int32 id)
		{
			OutputObject = null;
			DataTable dt = new DataTable(); 
			try
			{
				DataAccessObject.ClearParam();
				DataAccessObject.InputDefaultParams();
				DataAccessObject.InputParams("Action", "IsExists");
				DataAccessObject.InputParams("Id", id);
				dt = DataAccessObject.ExecuteDataTable(EntityProcedureName, DataAccessObject.ParamNames, DataAccessObject.ParamValues);
				if(dt == null || dt.Rows.Count == 0) 
					return false;
				else
					return true;
			}
			catch (Exception ex)
			{
				throw ex; 
			}
		}


		public override DataTable GetAll()
		{
			return DataAccessObject.ExecuteDataTable(EntityProcedureName, "Action", new object[] {"GetAll"});
		}


		public override void Reset()
		{
			this.Id = Int32.MinValue;
			this.OrderDiffId = Int32.MinValue;
			this.OrderNo = String.Empty;
			this.OrderTrackingNo = String.Empty;
			this.StoreName = String.Empty;
			this.ProductLink = String.Empty;
			this.ProductName = String.Empty;
			this.Size = String.Empty;
			this.Amount = Int32.MinValue;
			this.Weight = Decimal.MinValue;
			this.Price = Decimal.MinValue;
			this.Discount = Decimal.MinValue;
			this.PriceAfter = Decimal.MinValue;
			this.Note = String.Empty;
			this.ProductStatus = String.Empty;
		}


		public override void Fill(DataRow row)
		{
			Reset();
			if(row.Table.Columns.Contains("Id"))
				this.Id = DataAccess.CorrectValue(row["Id"], Id);
			if(row.Table.Columns.Contains("OrderDiffId"))
				this.OrderDiffId = DataAccess.CorrectValue(row["OrderDiffId"], OrderDiffId);
			if(row.Table.Columns.Contains("OrderNo"))
				this.OrderNo = DataAccess.CorrectValue(row["OrderNo"], OrderNo);
			if(row.Table.Columns.Contains("OrderTrackingNo"))
				this.OrderTrackingNo = DataAccess.CorrectValue(row["OrderTrackingNo"], OrderTrackingNo);
			if(row.Table.Columns.Contains("StoreName"))
				this.StoreName = DataAccess.CorrectValue(row["StoreName"], StoreName);
			if(row.Table.Columns.Contains("ProductLink"))
				this.ProductLink = DataAccess.CorrectValue(row["ProductLink"], ProductLink);
			if(row.Table.Columns.Contains("ProductName"))
				this.ProductName = DataAccess.CorrectValue(row["ProductName"], ProductName);
			if(row.Table.Columns.Contains("Size"))
				this.Size = DataAccess.CorrectValue(row["Size"], Size);
			if(row.Table.Columns.Contains("Amount"))
				this.Amount = DataAccess.CorrectValue(row["Amount"], Amount);
			if(row.Table.Columns.Contains("Weight"))
				this.Weight = DataAccess.CorrectValue(row["Weight"], Weight);
			if(row.Table.Columns.Contains("Price"))
				this.Price = DataAccess.CorrectValue(row["Price"], Price);
			if(row.Table.Columns.Contains("Discount"))
				this.Discount = DataAccess.CorrectValue(row["Discount"], Discount);
			if(row.Table.Columns.Contains("PriceAfter"))
				this.PriceAfter = DataAccess.CorrectValue(row["PriceAfter"], PriceAfter);
			if(row.Table.Columns.Contains("Note"))
				this.Note = DataAccess.CorrectValue(row["Note"], Note);
			if(row.Table.Columns.Contains("ProductStatus"))
				this.ProductStatus = DataAccess.CorrectValue(row["ProductStatus"], ProductStatus);
		}


		public override int UpdateTable(DataSet dataSource)
		{
			try
			{
				return DataAccessObject.UpdateTable(dataSource, EntityProcedureName, "Insert", "Update", "Delete");
			}
			catch (Exception ex)
			{
				throw ex; 
			}
		}


		public override int UpdateTable(DataTable dataSource)
		{
			try
			{
				return DataAccessObject.UpdateTable(dataSource, EntityProcedureName, "Insert", "Update", "Delete");
			}
			catch (Exception ex)
			{
				throw ex; 
			}
		}


		public override int UpdateTable(DataSet dataSource, string commandText, string[] paramNames)
		{
			try
			{
				return DataAccessObject.UpdateTable(dataSource, commandText, "Insert", "Update", "Delete", paramNames);
			}
			catch (Exception ex)
			{
				throw ex; 
			}
		}


		public override int UpdateTable(DataTable dataSource, string commandText, string[] paramNames)
		{
			try
			{
				return DataAccessObject.UpdateTable(dataSource, commandText, "Insert", "Update", "Delete", paramNames);
			}
			catch (Exception ex)
			{
				throw ex; 
			}
		}

		#endregion  

	}
}
